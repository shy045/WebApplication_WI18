import java.io.IOException;
import java.sql.* ;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.servlet.Servlet;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.sql.DataSource;

import org.commonmark.node.*;
import org.commonmark.parser.Parser;
import org.commonmark.renderer.html.HtmlRenderer;

import java.util.HashMap;
import java.util.Map;
import java.util.Iterator;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;

/**
 * Servlet implementation class for Servlet: ConfigurationTest
 *
 */
public class Editor extends HttpServlet {
    /**
     * The Servlet constructor
     *
     * @see javax.servlet.http.HttpServlet#HttpServlet()
     */
    public Editor() {}

    public void init() throws ServletException
    {
        /*  write any servlet initialization code here or remove this function */
    }

    public void destroy()
    {
        /*  write any servlet cleanup code here or remove this function */
    }

    /**
     * Handles HTTP GET requests
     *
     * @see javax.servlet.http.HttpServlet#doGet(HttpServletRequest request,
     *      HttpServletResponse response)
     */
    public void doGet(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException
    {
	// implement your GET method handling code here
	// currently we simply show the page generated by "edit.jsp"
        String action = request.getParameter("action");
        String title = request.getParameter("title");
        String body = request.getParameter("body");
        String username = request.getParameter("username");
        String postid_str = request.getParameter("postid");
        int postid = 0;
        if (postid_str != null) postid = Integer.parseInt(postid_str);

        switch (action)
        {
            // if (action.equals("preview"))
            case "preview":
                Parser parser = Parser.builder().build();
                HtmlRenderer renderer = HtmlRenderer.builder().build();
                request.setAttribute("html_title", renderer.render(parser.parse(title)));
                request.setAttribute("html_body", renderer.render(parser.parse(body)));
                request.getRequestDispatcher("/preview.jsp").forward(request, response);
                break;

            case "open":
                if (postid == 0)
                {
                    title = "default";
                    body = "default";
                }

                else if (title == null || body == null)
                {
                    HashMap Query = get_Entry(username, postid);
                    if (Query != null)
                    {
                        title = Query.get("title").toString();
                        body = Query.get("body").toString();
                    }
                    else
                    {
                        title = "";
                        body = "";
                    }
                }

                request.setAttribute("title", title);
                request.setAttribute("body", body);
                request.getRequestDispatcher("/edit.jsp").forward(request, response);
                break;

            case "list":
                if (username != null){
                    List<HashMap> entries = get_all_Entry(username);
                    List<String> usernames = new ArrayList<String>();
                    List<Integer> postids = new ArrayList<Integer>();
                    List<String> titles = new ArrayList<String>();
                    List<String> f_create_time = new ArrayList<String>();
                    List<String> f_modify_time = new ArrayList<String>();
                    for (HashMap e : entries)
                    {
                        usernames.add(e.get("username").toString());
                        postids.add((int)e.get("postid"));
                        titles.add(e.get("title").toString());
                        f_create_time.add(e.get("created").toString());
                        f_modify_time.add(e.get("modified").toString());
                    }
                    request.setAttribute("count", postids.size());
                    request.setAttribute("usernames", usernames);
                    request.setAttribute("postids", postids);
                    request.setAttribute("titles", titles);
                    request.setAttribute("f_create_time", f_create_time);
                    request.setAttribute("f_modify_time", f_modify_time);
                    request.getRequestDispatcher("/list.jsp").forward(request, response);
                }
                else
                    request.getRequestDispatcher("/list.jsp").forward(request, response);
                break;

            default:
                request.getRequestDispatcher("/edit.jsp").forward(request, response);
        }
    }

    /**
     * Handles HTTP POST requests
     *
     * @see javax.servlet.http.HttpServlet#doPost(HttpServletRequest request,
     *      HttpServletResponse response)
     */
    public void doPost(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException
    {
	// implement your POST method handling code here
	// currently we simply show the page generated by "edit.jsp"
        String action = request.getParameter("action");
        String title = request.getParameter("title");
        String body = request.getParameter("body");
        String username = request.getParameter("username");
        String postid_str = request.getParameter("postid");
        int postid = 0;
        if (postid_str != null) postid = Integer.parseInt(postid_str);


        switch (action)
        {
            case "delete":
                if (action.equals("delete"))
                    manage_Entry(username, postid, 2, title, body);

            case "save":
                if (action.equals("save"))
                {
                    if (postid <= 0)
                        manage_Entry(username, postid, 0, title, body);
                    else
                        manage_Entry(username, postid, 1, title, body);
                }

            case "list":
                if (username != null)
                {
                    List<HashMap> entries = get_all_Entry(username);
                    List<String> usernames = new ArrayList<String>();
                    List<Integer> postids = new ArrayList<Integer>();
                    List<String> titles = new ArrayList<String>();
                    List<String> f_create_time = new ArrayList<String>();
                    List<String> f_modify_time = new ArrayList<String>();
                    for (HashMap e : entries)
                    {
                        usernames.add(e.get("username").toString());
                        postids.add((int)e.get("postid"));
                        titles.add(e.get("title").toString());
                        f_create_time.add(e.get("created").toString());
                        f_modify_time.add(e.get("modified").toString());
                    }
                    request.setAttribute("count", postids.size());
                    request.setAttribute("usernames", usernames);
                    request.setAttribute("postids", postids);
                    request.setAttribute("titles", titles);
                    request.setAttribute("f_create_time", f_create_time);
                    request.setAttribute("f_modify_time", f_modify_time);
                    request.getRequestDispatcher("/list.jsp").forward(request, response);
                }
                else
                    request.getRequestDispatcher("/list.jsp").forward(request, response);
                break;

            // if (action.equals("preview"))
            case "preview":
                Parser parser = Parser.builder().build();
                HtmlRenderer renderer = HtmlRenderer.builder().build();
                request.setAttribute("html_title", renderer.render(parser.parse(title)));
                request.setAttribute("html_body", renderer.render(parser.parse(body)));
                request.getRequestDispatcher("/preview.jsp").forward(request, response);
                break;

            case "open":
                if (postid == 0)
                {
                    // title = "default";
                    // body = "default";
                }

                else if (title == null || body == null)
                {
                    HashMap Query = get_Entry(username, postid);
                    if (Query != null)
                    {
                        title = Query.get("title").toString();
                        body = Query.get("body").toString();
                    }
                    else
                    {
                        title = "";
                        body = "";
                    }
                }

                request.setAttribute("title", title);
                request.setAttribute("body", body);
                request.getRequestDispatcher("/edit.jsp").forward(request, response);
                break;
        }
    }

    private HashMap get_Entry(String username, int postid)
    {
        HashMap mMap = null;
        if (username == null || username.length() == 0)
            return mMap;

        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            System.out.println(ex);
            return mMap;
        }

        Connection con = null;
        PreparedStatement preparedStmt = null;
        ResultSet rs = null;

        try {
            /* create an instance of a Connection object */
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/CS144", "cs144", "");

            preparedStmt = con.prepareStatement(
                "SELECT * FROM Posts WHERE username = ? AND postid = ?"
            );
            preparedStmt.setString(1, username);
            preparedStmt.setInt(2, postid);

            rs = preparedStmt.executeQuery() ;
            rs.next();
            mMap = new HashMap();
            mMap.put("username", rs.getString("username"));
            mMap.put("postid", rs.getInt("postid"));
            mMap.put("title", rs.getString("title"));
            mMap.put("body", rs.getString("body"));
            Timestamp modified = rs.getTimestamp("modified");
            Timestamp created = rs.getTimestamp("created");
            mMap.put("modified", modified);
            mMap.put("created", created);
            SimpleDateFormat str_format = new SimpleDateFormat ("MM/dd/yyyy HH:mm");
    		mMap.put("f_modified", str_format.format(modified));
            mMap.put("f_created", str_format.format(created));

        } catch (SQLException ex){
            System.out.println("SQLException caught");
            System.out.println("---");
            while ( ex != null ) {
                System.out.println("Message   : " + ex.getMessage());
                System.out.println("SQLState  : " + ex.getSQLState());
                System.out.println("ErrorCode : " + ex.getErrorCode());
                System.out.println("---");
                ex = ex.getNextException();
            }
        } finally {
            try { rs.close(); } catch (Exception e) { /* ignored */ }
            try { preparedStmt.close(); } catch (Exception e) { /* ignored */ }
            try { con.close(); } catch (Exception e) { /* ignored */ }
            return mMap;
        }
    }

    private List<HashMap> get_all_Entry(String username)
    {
        HashMap mMap = null;
        List<HashMap> entries = new ArrayList<HashMap>();
        if (username == null || username.length() == 0)
            return entries;

        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            System.out.println(ex);
            return entries;
        }

        Connection con = null;
        PreparedStatement preparedStmt = null;
        ResultSet rs = null;

        try {
            /* create an instance of a Connection object */
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/CS144", "cs144", "");

            preparedStmt = con.prepareStatement(
                "SELECT * FROM Posts WHERE username = ?"
            );
            preparedStmt.setString(1, username);

            rs = preparedStmt.executeQuery() ;
            while (rs.next())
            {
                mMap = new HashMap();
                mMap.put("username", rs.getString("username"));
                mMap.put("postid", rs.getInt("postid"));
                mMap.put("title", rs.getString("title"));
                mMap.put("body", rs.getString("body"));
                Timestamp modified = rs.getTimestamp("modified");
                Timestamp created = rs.getTimestamp("created");
                mMap.put("modified", modified);
                mMap.put("created", created);
                SimpleDateFormat str_format = new SimpleDateFormat ("MM/dd/yyyy HH:mm");
        		mMap.put("f_modified", str_format.format(modified));
                mMap.put("f_created", str_format.format(created));
                entries.add(mMap);
            }
        } catch (SQLException ex){
            System.out.println("SQLException caught");
            System.out.println("---");
            while ( ex != null ) {
                System.out.println("Message   : " + ex.getMessage());
                System.out.println("SQLState  : " + ex.getSQLState());
                System.out.println("ErrorCode : " + ex.getErrorCode());
                System.out.println("---");
                ex = ex.getNextException();
            }
        } finally {
            try { rs.close(); } catch (Exception e) { /* ignored */ }
            try { preparedStmt.close(); } catch (Exception e) { /* ignored */ }
            try { con.close(); } catch (Exception e) { /* ignored */ }
            return entries;
        }
    }

    // 0 for add, 1 for update, 2 for delete
    private void manage_Entry(String username, int postid, int indicator, String title, String body)
    {
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            System.out.println(ex);
            return;
        }

        Connection con = null;
        PreparedStatement preparedStmt = null;
        Statement stmt = null;
        ResultSet rs = null;

        try{
            if (indicator == 2){
                /* create an instance of a Connection object */
                con = DriverManager.getConnection("jdbc:mysql://localhost:3306/CS144", "cs144", "");

                preparedStmt = con.prepareStatement(
                    "DELETE FROM Posts WHERE username = ? AND postid = ?"
                );
                preparedStmt.setString(1, username);
                preparedStmt.setInt(2, postid);
                preparedStmt.executeUpdate();
            }

            else if (indicator == 1){
                /* create an instance of a Connection object */
                con = DriverManager.getConnection("jdbc:mysql://localhost:3306/CS144", "cs144", "");

                preparedStmt = con.prepareStatement(
                    "UPDATE Posts SET title = ?, body = ?, modified = ? WHERE username = ? AND postid = ?"
                );
                preparedStmt.setString(1, title);
                preparedStmt.setString(2, body);
                Date cur_time = new Date();
                preparedStmt.setTimestamp(3, new Timestamp(cur_time.getTime()));
                preparedStmt.setString(4, username);
                preparedStmt.setInt(5, postid);
                preparedStmt.executeUpdate();
            }

            else {
                /* create an instance of a Connection object */
                con = DriverManager.getConnection("jdbc:mysql://localhost:3306/CS144", "cs144", "");
                // stmt = con.createStatement();
                // String sqlString = "SELECT Max(postid) max_id FROM Posts WHERE username = "+username;
                // rs = stmt.executeQuery(sqlString);
                preparedStmt = con.prepareStatement(
                    "SELECT Max(postid) max_id FROM Posts WHERE username = ?"
                );
                preparedStmt.setString(1, username);
                rs = preparedStmt.executeQuery() ;
                rs.next();
                int new_id = rs.getInt("max_id") + 1;

                preparedStmt = con.prepareStatement(
                    "INSERT INTO Posts (username, postid, title, body, modified, created) VALUES (?, ?, ?, ?, ?, ?)"
                );
                preparedStmt.setString(1, username);
                preparedStmt.setInt(2, new_id);
                preparedStmt.setString(3, title);
                preparedStmt.setString(4, body);
                Date cur_time = new Date();
                Timestamp timestamp = new Timestamp(cur_time.getTime());
                preparedStmt.setTimestamp(5, timestamp);
                preparedStmt.setTimestamp(6, timestamp);
                preparedStmt.executeUpdate();
            }

        } catch (SQLException ex){
            System.out.println("SQLException caught");
            System.out.println("---");
            while ( ex != null ) {
                System.out.println("Message   : " + ex.getMessage());
                System.out.println("SQLState  : " + ex.getSQLState());
                System.out.println("ErrorCode : " + ex.getErrorCode());
                System.out.println("---");
                ex = ex.getNextException();
            }
        } finally {
            try { rs.close(); } catch (Exception e) { /* ignored */ }
            try { preparedStmt.close(); } catch (Exception e) { /* ignored */ }
            try { stmt.close(); } catch (Exception e) { /* ignored */ }
            try { con.close(); } catch (Exception e) { /* ignored */ }
        }
    }
}
